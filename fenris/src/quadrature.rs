use nalgebra::{DefaultAllocator, DimName, RealField, Scalar, Vector2, Vector3, VectorN, U1, U2, U3};
use std::ops::{Add, AddAssign, Deref, Mul};

use nalgebra::allocator::Allocator;
use num::Zero;
use numeric_literals::replace_float_literals;

pub type QuadraturePair<T, D> = (Vec<T>, Vec<VectorN<T, D>>);
pub type QuadraturePair2d<T> = QuadraturePair<T, U2>;
pub type QuadraturePair3d<T> = QuadraturePair<T, U3>;

pub trait Quadrature<T, D>
where
    T: Scalar,
    D: DimName,
    DefaultAllocator: Allocator<T, D>,
{
    fn weights(&self) -> &[T];
    fn points(&self) -> &[VectorN<T, D>];

    /// Approximates the integral of the given function using this quadrature rule.
    fn integrate<U, Function>(&self, f: Function) -> U
    where
        Function: Fn(&VectorN<T, D>) -> U,
        U: Zero + Mul<T, Output = U> + Add<T, Output = U> + AddAssign<U>,
    {
        let mut integral = U::zero();
        for (w, p) in self.weights().iter().zip(self.points()) {
            integral += f(p) * w.clone();
        }
        integral
    }
}

/// Helper trait for 2D quadratures.
pub trait Quadrature2d<T>: Quadrature<T, U2>
where
    T: Scalar,
{
}

impl<T, X> Quadrature2d<T> for X
where
    T: Scalar,
    X: Quadrature<T, U2>,
{
}

impl<T, D, A, B> Quadrature<T, D> for (A, B)
where
    T: Scalar,
    D: DimName,
    A: Deref<Target = [T]>,
    B: Deref<Target = [VectorN<T, D>]>,
    DefaultAllocator: Allocator<T, D, U1>,
{
    fn weights(&self) -> &[T] {
        self.0.deref()
    }

    fn points(&self) -> &[VectorN<T, D>] {
        self.1.deref()
    }
}

impl<T, D, X> Quadrature<T, D> for &X
where
    T: Scalar,
    D: DimName,
    X: Quadrature<T, D>,
    DefaultAllocator: Allocator<T, D, U1>,
{
    fn weights(&self) -> &[T] {
        X::weights(self)
    }

    fn points(&self) -> &[VectorN<T, D>] {
        X::points(self)
    }
}

/// Returns a quadrature rule for Quads on the reference domain [-1, 1]^2 of strength 5,
/// meaning that it exactly integrates polynomials of total order 5 and less.
///
/// TODO: Generalize to other types and quadrature rules!
#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
pub fn quad_quadrature_strength_5_f64() -> (Vec<f64>, Vec<Vector2<f64>>) {
    let mut w = Vec::new();
    let mut p = Vec::new();
    p.reserve(8);
    w.reserve(8);

    // Quadrature rule obtained from
    // Witherden & Vincent, 2015,
    // "On the identification of symmetric quadrature rules for finite element methods"

    w.push(0.8163265306122448979591836734693877551);
    p.push(Vector2::new(0.68313005106397322554806924536807013272, 0.0));
    w.push(0.8163265306122448979591836734693877551);
    p.push(Vector2::new(0.0, 0.68313005106397322554806924536807013272));
    w.push(0.8163265306122448979591836734693877551);
    p.push(Vector2::new(-0.68313005106397322554806924536807013272, 0.0));
    w.push(0.8163265306122448979591836734693877551);
    p.push(Vector2::new(0.0, -0.68313005106397322554806924536807013272));
    w.push(0.1836734693877551020408163265306122449);
    p.push(Vector2::new(
        0.8819171036881968635005385845464201419,
        0.8819171036881968635005385845464201419,
    ));
    w.push(0.1836734693877551020408163265306122449);
    p.push(Vector2::new(
        0.8819171036881968635005385845464201419,
        -0.8819171036881968635005385845464201419,
    ));
    w.push(0.1836734693877551020408163265306122449);
    p.push(Vector2::new(
        -0.8819171036881968635005385845464201419,
        0.8819171036881968635005385845464201419,
    ));
    w.push(0.1836734693877551020408163265306122449);
    p.push(Vector2::new(
        -0.8819171036881968635005385845464201419,
        -0.8819171036881968635005385845464201419,
    ));

    (w, p)
}

/// Returns a quadrature rule for Quads on the reference domain [-1, 1]^2 of strength 5,
/// meaning that it exactly integrates polynomials of total order 5 and less.
///
/// TODO: Generalize to other types and quadrature rules!
#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).expect("Literal must be representable by T"))]
pub fn quad_quadrature_strength_5<T>() -> (Vec<T>, Vec<Vector2<T>>)
where
    T: RealField,
{
    let mut w = Vec::new();
    let mut p = Vec::new();
    p.reserve(8);
    w.reserve(8);

    // Quadrature rule obtained from
    // Witherden & Vincent, 2015,
    // "On the identification of symmetric quadrature rules for finite element methods"

    w.push(0.8163265306122448979591836734693877551);
    p.push(Vector2::new(0.68313005106397322554806924536807013272, 0.0));
    w.push(0.8163265306122448979591836734693877551);
    p.push(Vector2::new(0.0, 0.68313005106397322554806924536807013272));
    w.push(0.8163265306122448979591836734693877551);
    p.push(Vector2::new(-0.68313005106397322554806924536807013272, 0.0));
    w.push(0.8163265306122448979591836734693877551);
    p.push(Vector2::new(0.0, -0.68313005106397322554806924536807013272));
    w.push(0.1836734693877551020408163265306122449);
    p.push(Vector2::new(
        0.8819171036881968635005385845464201419,
        0.8819171036881968635005385845464201419,
    ));
    w.push(0.1836734693877551020408163265306122449);
    p.push(Vector2::new(
        0.8819171036881968635005385845464201419,
        -0.8819171036881968635005385845464201419,
    ));
    w.push(0.1836734693877551020408163265306122449);
    p.push(Vector2::new(
        -0.8819171036881968635005385845464201419,
        0.8819171036881968635005385845464201419,
    ));
    w.push(0.1836734693877551020408163265306122449);
    p.push(Vector2::new(
        -0.8819171036881968635005385845464201419,
        -0.8819171036881968635005385845464201419,
    ));

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
pub fn tri_vertex_quadrature<T>() -> (Vec<T>, Vec<Vector2<T>>)
where
    T: RealField,
{
    let x: Vec<_> = vec![-1.0, 1.0, -1.0]
        .into_iter()
        .map(|t| T::from_f64(t).unwrap())
        .collect();
    let y: Vec<_> = vec![-1.0, -1.0, 1.0]
        .into_iter()
        .map(|t| T::from_f64(t).unwrap())
        .collect();
    let w = vec![1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0]
        .into_iter()
        .map(|t| T::from_f64(t).unwrap())
        .collect();

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .map(|(x, y)| Vector2::new(x, y))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).unwrap())]
pub fn tri_quadrature_strength_2<T>() -> (Vec<T>, Vec<Vector2<T>>)
where
    T: RealField,
{
    let w = vec![
        0.66666666666666666666666666666666666667,
        0.66666666666666666666666666666666666667,
        0.66666666666666666666666666666666666667,
    ];

    let x = vec![
        -0.66666666666666666666666666666666666667,
        0.33333333333333333333333333333333333333,
        -0.66666666666666666666666666666666666667,
    ];

    let y = vec![
        0.33333333333333333333333333333333333333,
        -0.66666666666666666666666666666666666667,
        -0.66666666666666666666666666666666666667,
    ];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .map(|(x, y)| Vector2::new(x, y))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
pub fn tri_quadrature_strength_5_f64() -> (Vec<f64>, Vec<Vector2<f64>>) {
    let x = vec![
        -0.33333333333333333333333333333333333333,
        -0.79742698535308732239802527616975234389,
        0.59485397070617464479605055233950468778,
        -0.79742698535308732239802527616975234389,
        -0.059715871789769820459117580973104798968,
        -0.88056825642046035908176483805379040206,
        -0.059715871789769820459117580973104798968,
    ];
    let y = vec![
        -0.33333333333333333333333333333333333333,
        0.59485397070617464479605055233950468778,
        -0.79742698535308732239802527616975234389,
        -0.79742698535308732239802527616975234389,
        -0.88056825642046035908176483805379040206,
        -0.059715871789769820459117580973104798968,
        -0.059715871789769820459117580973104798968,
    ];
    let w = vec![
        0.45,
        0.25187836108965430519136789100036266732,
        0.25187836108965430519136789100036266732,
        0.25187836108965430519136789100036266732,
        0.26478830557701236147529877566630399935,
        0.26478830557701236147529877566630399935,
        0.26478830557701236147529877566630399935,
    ];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .map(|(x, y)| Vector2::new(x, y))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
pub fn tri_quadrature_strength_5<T>() -> (Vec<T>, Vec<Vector2<T>>)
where
    T: RealField,
{
    // TODO: Extend numeric_literals so that it can be used with macros
    // like vec!, assert! etc (see PR #1 for progress on this)
    let x: Vec<_> = vec![
        -0.33333333333333333333333333333333333333,
        -0.79742698535308732239802527616975234389,
        0.59485397070617464479605055233950468778,
        -0.79742698535308732239802527616975234389,
        -0.059715871789769820459117580973104798968,
        -0.88056825642046035908176483805379040206,
        -0.059715871789769820459117580973104798968,
    ]
    .into_iter()
    .map(|t| T::from_f64(t).unwrap())
    .collect();
    let y: Vec<_> = vec![
        -0.33333333333333333333333333333333333333,
        0.59485397070617464479605055233950468778,
        -0.79742698535308732239802527616975234389,
        -0.79742698535308732239802527616975234389,
        -0.88056825642046035908176483805379040206,
        -0.059715871789769820459117580973104798968,
        -0.059715871789769820459117580973104798968,
    ]
    .into_iter()
    .map(|t| T::from_f64(t).unwrap())
    .collect();
    let w = vec![
        0.45,
        0.25187836108965430519136789100036266732,
        0.25187836108965430519136789100036266732,
        0.25187836108965430519136789100036266732,
        0.26478830557701236147529877566630399935,
        0.26478830557701236147529877566630399935,
        0.26478830557701236147529877566630399935,
    ]
    .into_iter()
    .map(|t| T::from_f64(t).unwrap())
    .collect();

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .map(|(x, y)| Vector2::new(x, y))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
pub fn tri_quadrature_strength_11<T>() -> (Vec<T>, Vec<Vector2<T>>)
where
    T: RealField,
{
    let x: Vec<_> = vec![
        -0.33333333333333333333333333333333333333,
        -0.94302916477125618104036726638981901865,
        0.8860583295425123620807345327796380373,
        -0.94302916477125618104036726638981901865,
        -0.57956008659364348598387546330841477973,
        0.15912017318728697196775092661682955946,
        -0.57956008659364348598387546330841477973,
        -0.79472903457550713910176986023011167594,
        0.58945806915101427820353972046022335189,
        -0.79472903457550713910176986023011167594,
        -0.0082161980682181738701197619927680147278,
        -0.98356760386356365225976047601446397054,
        -0.0082161980682181738701197619927680147278,
        -0.12306814647129561795332827431496109166,
        -0.75386370705740876409334345137007781667,
        -0.12306814647129561795332827431496109166,
        -0.70135042269583522760854842424565295474,
        0.68669956732370632439798287279764986108,
        -0.98534914462787109678943444855199690633,
        0.68669956732370632439798287279764986108,
        -0.98534914462787109678943444855199690633,
        -0.70135042269583522760854842424565295474,
        -0.90797899966914008822008044741026548976,
        0.3288167483937283948070953526650315723,
        -0.42083774872458830658701490525476608254,
        0.3288167483937283948070953526650315723,
        -0.42083774872458830658701490525476608254,
        -0.90797899966914008822008044741026548976,
    ]
    .into_iter()
    .map(|t| T::from_f64(t).unwrap())
    .collect();
    let y: Vec<_> = vec![
        -0.33333333333333333333333333333333333333,
        0.8860583295425123620807345327796380373,
        -0.94302916477125618104036726638981901865,
        -0.94302916477125618104036726638981901865,
        0.15912017318728697196775092661682955946,
        -0.57956008659364348598387546330841477973,
        -0.57956008659364348598387546330841477973,
        0.58945806915101427820353972046022335189,
        -0.79472903457550713910176986023011167594,
        -0.79472903457550713910176986023011167594,
        -0.98356760386356365225976047601446397054,
        -0.0082161980682181738701197619927680147278,
        -0.0082161980682181738701197619927680147278,
        -0.75386370705740876409334345137007781667,
        -0.12306814647129561795332827431496109166,
        -0.12306814647129561795332827431496109166,
        0.68669956732370632439798287279764986108,
        -0.70135042269583522760854842424565295474,
        0.68669956732370632439798287279764986108,
        -0.98534914462787109678943444855199690633,
        -0.70135042269583522760854842424565295474,
        -0.98534914462787109678943444855199690633,
        0.3288167483937283948070953526650315723,
        -0.90797899966914008822008044741026548976,
        0.3288167483937283948070953526650315723,
        -0.42083774872458830658701490525476608254,
        -0.90797899966914008822008044741026548976,
        -0.42083774872458830658701490525476608254,
    ]
    .into_iter()
    .map(|t| T::from_f64(t).unwrap())
    .collect();
    let w = vec![
        0.17152235946444843427639825073065398895,
        0.020863741025789391746056984197324633703,
        0.020863741025789391746056984197324633703,
        0.020863741025789391746056984197324633703,
        0.14103136822343315668414771834585673963,
        0.14103136822343315668414771834585673963,
        0.14103136822343315668414771834585673963,
        0.077261518474038644953267609178802298293,
        0.077261518474038644953267609178802298293,
        0.077261518474038644953267609178802298293,
        0.03321254610917073915275167855011212173,
        0.03321254610917073915275167855011212173,
        0.03321254610917073915275167855011212173,
        0.13463230815893660239567441124657557177,
        0.13463230815893660239567441124657557177,
        0.13463230815893660239567441124657557177,
        0.020580579145906554986161254967959059438,
        0.020580579145906554986161254967959059438,
        0.020580579145906554986161254967959059438,
        0.020580579145906554986161254967959059438,
        0.020580579145906554986161254967959059438,
        0.020580579145906554986161254967959059438,
        0.080664953281001105168489835817596259842,
        0.080664953281001105168489835817596259842,
        0.080664953281001105168489835817596259842,
        0.080664953281001105168489835817596259842,
        0.080664953281001105168489835817596259842,
        0.080664953281001105168489835817596259842,
    ]
    .into_iter()
    .map(|t| T::from_f64(t).unwrap())
    .collect();

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .map(|(x, y)| Vector2::new(x, y))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
pub fn quad_quadrature_strength_11<T>() -> (Vec<T>, Vec<Vector2<T>>)
where
    T: RealField,
{
    let x: Vec<_> = vec![
        0.71461782966460591762942382404176367266,
        0.0,
        -0.71461782966460591762942382404176367266,
        0.0,
        0.27365721017145961383557026431906649027,
        0.27365721017145961383557026431906649027,
        -0.27365721017145961383557026431906649027,
        -0.27365721017145961383557026431906649027,
        0.63660393221230104405852833198974404207,
        0.63660393221230104405852833198974404207,
        -0.63660393221230104405852833198974404207,
        -0.63660393221230104405852833198974404207,
        0.95163038878403345881049829363696371918,
        0.81556543368963841306389865463928759233,
        0.95163038878403345881049829363696371918,
        -0.81556543368963841306389865463928759233,
        -0.95163038878403345881049829363696371918,
        0.81556543368963841306389865463928759233,
        -0.95163038878403345881049829363696371918,
        -0.81556543368963841306389865463928759233,
        0.34620720004764544118747320724330043979,
        0.93556787148759108135480212161830515337,
        0.34620720004764544118747320724330043979,
        -0.93556787148759108135480212161830515337,
        -0.34620720004764544118747320724330043979,
        0.93556787148759108135480212161830515337,
        -0.34620720004764544118747320724330043979,
        -0.93556787148759108135480212161830515337,
    ]
    .into_iter()
    .map(|t| T::from_f64(t).unwrap())
    .collect();

    let y: Vec<_> = vec![
        0.0,
        0.71461782966460591762942382404176367266,
        0.0,
        -0.71461782966460591762942382404176367266,
        0.27365721017145961383557026431906649027,
        -0.27365721017145961383557026431906649027,
        0.27365721017145961383557026431906649027,
        -0.27365721017145961383557026431906649027,
        0.63660393221230104405852833198974404207,
        -0.63660393221230104405852833198974404207,
        0.63660393221230104405852833198974404207,
        -0.63660393221230104405852833198974404207,
        0.81556543368963841306389865463928759233,
        0.95163038878403345881049829363696371918,
        -0.81556543368963841306389865463928759233,
        0.95163038878403345881049829363696371918,
        0.81556543368963841306389865463928759233,
        -0.95163038878403345881049829363696371918,
        -0.81556543368963841306389865463928759233,
        -0.95163038878403345881049829363696371918,
        0.93556787148759108135480212161830515337,
        0.34620720004764544118747320724330043979,
        -0.93556787148759108135480212161830515337,
        0.34620720004764544118747320724330043979,
        0.93556787148759108135480212161830515337,
        -0.34620720004764544118747320724330043979,
        -0.93556787148759108135480212161830515337,
        -0.34620720004764544118747320724330043979,
    ]
    .into_iter()
    .map(|t| T::from_f64(t).unwrap())
    .collect();

    let w: Vec<_> = vec![
        0.21740043986871200551566672515052291339,
        0.21740043986871200551566672515052291339,
        0.21740043986871200551566672515052291339,
        0.21740043986871200551566672515052291339,
        0.27727410298385108795028691796804462632,
        0.27727410298385108795028691796804462632,
        0.27727410298385108795028691796804462632,
        0.27727410298385108795028691796804462632,
        0.21393363787824810450280500660206134837,
        0.21393363787824810450280500660206134837,
        0.21393363787824810450280500660206134837,
        0.21393363787824810450280500660206134837,
        0.044074569114983092054304271154112061776,
        0.044074569114983092054304271154112061776,
        0.044074569114983092054304271154112061776,
        0.044074569114983092054304271154112061776,
        0.044074569114983092054304271154112061776,
        0.044074569114983092054304271154112061776,
        0.044074569114983092054304271154112061776,
        0.044074569114983092054304271154112061776,
        0.10162134051961130896131640398557349419,
        0.10162134051961130896131640398557349419,
        0.10162134051961130896131640398557349419,
        0.10162134051961130896131640398557349419,
        0.10162134051961130896131640398557349419,
        0.10162134051961130896131640398557349419,
        0.10162134051961130896131640398557349419,
        0.10162134051961130896131640398557349419,
    ]
    .into_iter()
    .map(|t| T::from_f64(t).unwrap())
    .collect();

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .map(|(x, y)| Vector2::new(x, y))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).unwrap())]
pub fn tet_quadrature_strength_1<T>() -> (Vec<T>, Vec<Vector3<T>>)
where
    T: RealField,
{
    let w: Vec<T> = vec![(4.0 / 3.0)];
    let x = vec![-0.5];
    let y = vec![-0.5];
    let z = vec![-0.5];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .zip(z.into_iter())
        .map(|((x, y), z)| Vector3::new(x, y, z))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).unwrap())]
pub fn tet_quadrature_strength_2<T>() -> (Vec<T>, Vec<Vector3<T>>)
where
    T: RealField,
{
    let w: Vec<T> = vec![
        0.33333333333333333333333333333333333333,
        0.33333333333333333333333333333333333333,
        0.33333333333333333333333333333333333333,
        0.33333333333333333333333333333333333333,
    ];
    let x = vec![
        -0.72360679774997896964091736687312762354,
        -0.72360679774997896964091736687312762354,
        0.17082039324993690892275210061938287063,
        -0.72360679774997896964091736687312762354,
    ];
    let y = vec![
        -0.72360679774997896964091736687312762354,
        0.17082039324993690892275210061938287063,
        -0.72360679774997896964091736687312762354,
        -0.72360679774997896964091736687312762354,
    ];
    let z = vec![
        0.17082039324993690892275210061938287063,
        -0.72360679774997896964091736687312762354,
        -0.72360679774997896964091736687312762354,
        -0.72360679774997896964091736687312762354,
    ];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .zip(z.into_iter())
        .map(|((x, y), z)| Vector3::new(x, y, z))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).unwrap())]
pub fn tet_quadrature_strength_3<T>() -> (Vec<T>, Vec<Vector3<T>>)
where
    T: RealField,
{
    let w: Vec<T> = vec![
        0.18162379004944980942342872025562069427,
        0.18162379004944980942342872025562069427,
        0.18162379004944980942342872025562069427,
        0.18162379004944980942342872025562069427,
        0.15170954328388352390990461307771263906,
        0.15170954328388352390990461307771263906,
        0.15170954328388352390990461307771263906,
        0.15170954328388352390990461307771263906,
    ];

    let x = vec![
        -0.34367339496723662642072827083693243093,
        -0.34367339496723662642072827083693243093,
        -0.9689798150982901207378151874892027072,
        -0.34367339496723662642072827083693243093,
        -0.78390550020314279176487322158837338344,
        -0.78390550020314279176487322158837338344,
        0.35171650060942837529461966476512015033,
        -0.78390550020314279176487322158837338344,
    ];

    let y = vec![
        -0.34367339496723662642072827083693243093,
        -0.9689798150982901207378151874892027072,
        -0.34367339496723662642072827083693243093,
        -0.34367339496723662642072827083693243093,
        -0.78390550020314279176487322158837338344,
        0.35171650060942837529461966476512015033,
        -0.78390550020314279176487322158837338344,
        -0.78390550020314279176487322158837338344,
    ];

    let z = vec![
        -0.9689798150982901207378151874892027072,
        -0.34367339496723662642072827083693243093,
        -0.34367339496723662642072827083693243093,
        -0.34367339496723662642072827083693243093,
        0.35171650060942837529461966476512015033,
        -0.78390550020314279176487322158837338344,
        -0.78390550020314279176487322158837338344,
        -0.78390550020314279176487322158837338344,
    ];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .zip(z.into_iter())
        .map(|((x, y), z)| Vector3::new(x, y, z))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).unwrap())]
pub fn tet_quadrature_strength_5<T>() -> (Vec<T>, Vec<Vector3<T>>)
where
    T: RealField,
{
    let w: Vec<T> = vec![
        0.15025056762402113439891420311104844508,
        0.15025056762402113439891420311104844508,
        0.15025056762402113439891420311104844508,
        0.15025056762402113439891420311104844508,
        0.097990724155149266058280273981770004697,
        0.097990724155149266058280273981770004697,
        0.097990724155149266058280273981770004697,
        0.097990724155149266058280273981770004697,
        0.05672802770277528858409257082700992237,
        0.05672802770277528858409257082700992237,
        0.05672802770277528858409257082700992237,
        0.05672802770277528858409257082700992237,
        0.05672802770277528858409257082700992237,
        0.05672802770277528858409257082700992237,
    ];

    let x = vec![
        -0.37822816147339878040530853247308433401,
        -0.37822816147339878040530853247308433401,
        -0.86531551557980365878407440258074699796,
        -0.37822816147339878040530853247308433401,
        -0.81452949937821754719535217252593878951,
        -0.81452949937821754719535217252593878951,
        0.44358849813465264158605651757781636853,
        -0.81452949937821754719535217252593878951,
        -0.90899259174870070101623894744132112187,
        -0.091007408251299298983761052558678878131,
        -0.90899259174870070101623894744132112187,
        -0.90899259174870070101623894744132112187,
        -0.091007408251299298983761052558678878131,
        -0.091007408251299298983761052558678878131,
    ];

    let y = vec![
        -0.37822816147339878040530853247308433401,
        -0.86531551557980365878407440258074699796,
        -0.37822816147339878040530853247308433401,
        -0.37822816147339878040530853247308433401,
        -0.81452949937821754719535217252593878951,
        0.44358849813465264158605651757781636853,
        -0.81452949937821754719535217252593878951,
        -0.81452949937821754719535217252593878951,
        -0.091007408251299298983761052558678878131,
        -0.90899259174870070101623894744132112187,
        -0.90899259174870070101623894744132112187,
        -0.091007408251299298983761052558678878131,
        -0.90899259174870070101623894744132112187,
        -0.091007408251299298983761052558678878131,
    ];

    let z = vec![
        -0.86531551557980365878407440258074699796,
        -0.37822816147339878040530853247308433401,
        -0.37822816147339878040530853247308433401,
        -0.37822816147339878040530853247308433401,
        0.44358849813465264158605651757781636853,
        -0.81452949937821754719535217252593878951,
        -0.81452949937821754719535217252593878951,
        -0.81452949937821754719535217252593878951,
        -0.091007408251299298983761052558678878131,
        -0.091007408251299298983761052558678878131,
        -0.091007408251299298983761052558678878131,
        -0.90899259174870070101623894744132112187,
        -0.90899259174870070101623894744132112187,
        -0.90899259174870070101623894744132112187,
    ];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .zip(z.into_iter())
        .map(|((x, y), z)| Vector3::new(x, y, z))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).unwrap())]
pub fn tet_quadrature_strength_10<T>() -> (Vec<T>, Vec<Vector3<T>>)
where
    T: RealField,
{
    let w = vec![
        0.063199698074694317846318428237401466134,
        0.035916079989691599737018881339842778615,
        0.035916079989691599737018881339842778615,
        0.035916079989691599737018881339842778615,
        0.035916079989691599737018881339842778615,
        0.013158879622391177646076980573564101693,
        0.013158879622391177646076980573564101693,
        0.013158879622391177646076980573564101693,
        0.013158879622391177646076980573564101693,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.015191841626926975498161246507619114195,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.00048259245911900483231983784641134908616,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.034319642640608095038714683012872940214,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.013514495573007723718021960153355702928,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.0087681963693812055566076536006009347954,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
        0.017209381065149320852393906999331987612,
    ];

    let x = vec![
        -0.5,
        -0.3754998626096227045403833626263450896,
        -0.3754998626096227045403833626263450896,
        -0.87350041217113188637884991212096473119,
        -0.3754998626096227045403833626263450896,
        -0.77138069228530769882525760469269910942,
        -0.77138069228530769882525760469269910942,
        0.31414207685592309647577281407809732827,
        -0.77138069228530769882525760469269910942,
        -0.66902794876077789679101975111094717095,
        -0.66902794876077789679101975111094717095,
        -0.17913852156206901142420431149697662502,
        -0.97269500811508408036057162589509957901,
        -0.17913852156206901142420431149697662502,
        -0.17913852156206901142420431149697662502,
        -0.97269500811508408036057162589509957901,
        -0.17913852156206901142420431149697662502,
        -0.17913852156206901142420431149697662502,
        -0.17913852156206901142420431149697662502,
        -0.97269500811508408036057162589509957901,
        -0.66902794876077789679101975111094717095,
        0.8859775346904097323952611738365015259,
        0.8859775346904097323952611738365015259,
        -0.98772398235041850430481257350316929785,
        -0.9105295699895727237856360268301629302,
        -0.98772398235041850430481257350316929785,
        -0.98772398235041850430481257350316929785,
        -0.9105295699895727237856360268301629302,
        -0.98772398235041850430481257350316929785,
        -0.98772398235041850430481257350316929785,
        -0.98772398235041850430481257350316929785,
        -0.9105295699895727237856360268301629302,
        0.8859775346904097323952611738365015259,
        -0.045619240191439298911787183406185558751,
        -0.045619240191439298911787183406185558751,
        -0.75789963770882114801220999680989894474,
        -0.43858148439091840506379282297401655176,
        -0.75789963770882114801220999680989894474,
        -0.75789963770882114801220999680989894474,
        -0.43858148439091840506379282297401655176,
        -0.75789963770882114801220999680989894474,
        -0.75789963770882114801220999680989894474,
        -0.75789963770882114801220999680989894474,
        -0.43858148439091840506379282297401655176,
        -0.045619240191439298911787183406185558751,
        0.18851253896001405132314006877136059652,
        0.18851253896001405132314006877136059652,
        -0.93444106356711465845055795933535161918,
        -0.31963041182578473442202415010065735815,
        -0.93444106356711465845055795933535161918,
        -0.93444106356711465845055795933535161918,
        -0.31963041182578473442202415010065735815,
        -0.93444106356711465845055795933535161918,
        -0.93444106356711465845055795933535161918,
        -0.93444106356711465845055795933535161918,
        -0.31963041182578473442202415010065735815,
        0.18851253896001405132314006877136059652,
        0.60235456931668878246228336815716196359,
        0.60235456931668878246228336815716196359,
        -0.93502943687035390432897012004314760659,
        -0.73229569557598097380434312807086675041,
        -0.93502943687035390432897012004314760659,
        -0.93502943687035390432897012004314760659,
        -0.73229569557598097380434312807086675041,
        -0.93502943687035390432897012004314760659,
        -0.93502943687035390432897012004314760659,
        -0.93502943687035390432897012004314760659,
        -0.73229569557598097380434312807086675041,
        0.60235456931668878246228336815716196359,
        0.2561436909507320213865521444358193313,
        0.2561436909507320213865521444358193313,
        -0.65004131563212195143010154694337920556,
        -0.95606105968648811852634905054906092018,
        -0.65004131563212195143010154694337920556,
        -0.65004131563212195143010154694337920556,
        -0.95606105968648811852634905054906092018,
        -0.65004131563212195143010154694337920556,
        -0.65004131563212195143010154694337920556,
        -0.65004131563212195143010154694337920556,
        -0.95606105968648811852634905054906092018,
        0.2561436909507320213865521444358193313,
    ];

    let y = vec![
        -0.5,
        -0.3754998626096227045403833626263450896,
        -0.87350041217113188637884991212096473119,
        -0.3754998626096227045403833626263450896,
        -0.3754998626096227045403833626263450896,
        -0.77138069228530769882525760469269910942,
        0.31414207685592309647577281407809732827,
        -0.77138069228530769882525760469269910942,
        -0.77138069228530769882525760469269910942,
        -0.17913852156206901142420431149697662502,
        -0.17913852156206901142420431149697662502,
        -0.17913852156206901142420431149697662502,
        -0.66902794876077789679101975111094717095,
        -0.97269500811508408036057162589509957901,
        -0.66902794876077789679101975111094717095,
        -0.17913852156206901142420431149697662502,
        -0.97269500811508408036057162589509957901,
        -0.17913852156206901142420431149697662502,
        -0.66902794876077789679101975111094717095,
        -0.17913852156206901142420431149697662502,
        -0.97269500811508408036057162589509957901,
        -0.98772398235041850430481257350316929785,
        -0.98772398235041850430481257350316929785,
        -0.98772398235041850430481257350316929785,
        0.8859775346904097323952611738365015259,
        -0.9105295699895727237856360268301629302,
        0.8859775346904097323952611738365015259,
        -0.98772398235041850430481257350316929785,
        -0.9105295699895727237856360268301629302,
        -0.98772398235041850430481257350316929785,
        0.8859775346904097323952611738365015259,
        -0.98772398235041850430481257350316929785,
        -0.9105295699895727237856360268301629302,
        -0.75789963770882114801220999680989894474,
        -0.75789963770882114801220999680989894474,
        -0.75789963770882114801220999680989894474,
        -0.045619240191439298911787183406185558751,
        -0.43858148439091840506379282297401655176,
        -0.045619240191439298911787183406185558751,
        -0.75789963770882114801220999680989894474,
        -0.43858148439091840506379282297401655176,
        -0.75789963770882114801220999680989894474,
        -0.045619240191439298911787183406185558751,
        -0.75789963770882114801220999680989894474,
        -0.43858148439091840506379282297401655176,
        -0.93444106356711465845055795933535161918,
        -0.93444106356711465845055795933535161918,
        -0.93444106356711465845055795933535161918,
        0.18851253896001405132314006877136059652,
        -0.31963041182578473442202415010065735815,
        0.18851253896001405132314006877136059652,
        -0.93444106356711465845055795933535161918,
        -0.31963041182578473442202415010065735815,
        -0.93444106356711465845055795933535161918,
        0.18851253896001405132314006877136059652,
        -0.93444106356711465845055795933535161918,
        -0.31963041182578473442202415010065735815,
        -0.93502943687035390432897012004314760659,
        -0.93502943687035390432897012004314760659,
        -0.93502943687035390432897012004314760659,
        0.60235456931668878246228336815716196359,
        -0.73229569557598097380434312807086675041,
        0.60235456931668878246228336815716196359,
        -0.93502943687035390432897012004314760659,
        -0.73229569557598097380434312807086675041,
        -0.93502943687035390432897012004314760659,
        0.60235456931668878246228336815716196359,
        -0.93502943687035390432897012004314760659,
        -0.73229569557598097380434312807086675041,
        -0.65004131563212195143010154694337920556,
        -0.65004131563212195143010154694337920556,
        -0.65004131563212195143010154694337920556,
        0.2561436909507320213865521444358193313,
        -0.95606105968648811852634905054906092018,
        0.2561436909507320213865521444358193313,
        -0.65004131563212195143010154694337920556,
        -0.95606105968648811852634905054906092018,
        -0.65004131563212195143010154694337920556,
        0.2561436909507320213865521444358193313,
        -0.65004131563212195143010154694337920556,
        -0.95606105968648811852634905054906092018,
    ];

    let z = vec![
        -0.5,
        -0.87350041217113188637884991212096473119,
        -0.3754998626096227045403833626263450896,
        -0.3754998626096227045403833626263450896,
        -0.3754998626096227045403833626263450896,
        0.31414207685592309647577281407809732827,
        -0.77138069228530769882525760469269910942,
        -0.77138069228530769882525760469269910942,
        -0.77138069228530769882525760469269910942,
        -0.97269500811508408036057162589509957901,
        -0.17913852156206901142420431149697662502,
        -0.66902794876077789679101975111094717095,
        -0.17913852156206901142420431149697662502,
        -0.66902794876077789679101975111094717095,
        -0.17913852156206901142420431149697662502,
        -0.66902794876077789679101975111094717095,
        -0.17913852156206901142420431149697662502,
        -0.97269500811508408036057162589509957901,
        -0.97269500811508408036057162589509957901,
        -0.17913852156206901142420431149697662502,
        -0.17913852156206901142420431149697662502,
        -0.9105295699895727237856360268301629302,
        -0.98772398235041850430481257350316929785,
        0.8859775346904097323952611738365015259,
        -0.98772398235041850430481257350316929785,
        0.8859775346904097323952611738365015259,
        -0.98772398235041850430481257350316929785,
        0.8859775346904097323952611738365015259,
        -0.98772398235041850430481257350316929785,
        -0.9105295699895727237856360268301629302,
        -0.9105295699895727237856360268301629302,
        -0.98772398235041850430481257350316929785,
        -0.98772398235041850430481257350316929785,
        -0.43858148439091840506379282297401655176,
        -0.75789963770882114801220999680989894474,
        -0.045619240191439298911787183406185558751,
        -0.75789963770882114801220999680989894474,
        -0.045619240191439298911787183406185558751,
        -0.75789963770882114801220999680989894474,
        -0.045619240191439298911787183406185558751,
        -0.75789963770882114801220999680989894474,
        -0.43858148439091840506379282297401655176,
        -0.43858148439091840506379282297401655176,
        -0.75789963770882114801220999680989894474,
        -0.75789963770882114801220999680989894474,
        -0.31963041182578473442202415010065735815,
        -0.93444106356711465845055795933535161918,
        0.18851253896001405132314006877136059652,
        -0.93444106356711465845055795933535161918,
        0.18851253896001405132314006877136059652,
        -0.93444106356711465845055795933535161918,
        0.18851253896001405132314006877136059652,
        -0.93444106356711465845055795933535161918,
        -0.31963041182578473442202415010065735815,
        -0.31963041182578473442202415010065735815,
        -0.93444106356711465845055795933535161918,
        -0.93444106356711465845055795933535161918,
        -0.73229569557598097380434312807086675041,
        -0.93502943687035390432897012004314760659,
        0.60235456931668878246228336815716196359,
        -0.93502943687035390432897012004314760659,
        0.60235456931668878246228336815716196359,
        -0.93502943687035390432897012004314760659,
        0.60235456931668878246228336815716196359,
        -0.93502943687035390432897012004314760659,
        -0.73229569557598097380434312807086675041,
        -0.73229569557598097380434312807086675041,
        -0.93502943687035390432897012004314760659,
        -0.93502943687035390432897012004314760659,
        -0.95606105968648811852634905054906092018,
        -0.65004131563212195143010154694337920556,
        0.2561436909507320213865521444358193313,
        -0.65004131563212195143010154694337920556,
        0.2561436909507320213865521444358193313,
        -0.65004131563212195143010154694337920556,
        0.2561436909507320213865521444358193313,
        -0.65004131563212195143010154694337920556,
        -0.95606105968648811852634905054906092018,
        -0.95606105968648811852634905054906092018,
        -0.65004131563212195143010154694337920556,
        -0.65004131563212195143010154694337920556,
    ];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .zip(z.into_iter())
        .map(|((x, y), z)| Vector3::new(x, y, z))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).unwrap())]
pub fn hex_quadrature_strength_3<T>() -> (Vec<T>, Vec<Vector3<T>>)
where
    T: RealField,
{
    let w = vec![
        1.3333333333333333333333333333333333333,
        1.3333333333333333333333333333333333333,
        1.3333333333333333333333333333333333333,
        1.3333333333333333333333333333333333333,
        1.3333333333333333333333333333333333333,
        1.3333333333333333333333333333333333333,
    ];

    let x = vec![-1.0, 0.0, 0.0, 0.0, 1.0, 0.0];

    let y = vec![0.0, 0.0, 1.0, 0.0, 0.0, -1.0];

    let z = vec![0.0, 1.0, 0.0, -1.0, 0.0, 0.0];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .zip(z.into_iter())
        .map(|((x, y), z)| Vector3::new(x, y, z))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).unwrap())]
pub fn hex_quadrature_strength_5<T>() -> (Vec<T>, Vec<Vector3<T>>)
where
    T: RealField,
{
    let w = vec![
        0.88642659279778393351800554016620498615,
        0.88642659279778393351800554016620498615,
        0.88642659279778393351800554016620498615,
        0.88642659279778393351800554016620498615,
        0.88642659279778393351800554016620498615,
        0.88642659279778393351800554016620498615,
        0.33518005540166204986149584487534626039,
        0.33518005540166204986149584487534626039,
        0.33518005540166204986149584487534626039,
        0.33518005540166204986149584487534626039,
        0.33518005540166204986149584487534626039,
        0.33518005540166204986149584487534626039,
        0.33518005540166204986149584487534626039,
        0.33518005540166204986149584487534626039,
    ];

    let x = vec![
        -0.79582242575422146326454882047613584616,
        0.0,
        0.0,
        0.0,
        0.79582242575422146326454882047613584616,
        0.0,
        0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
    ];

    let y = vec![
        0.0,
        0.0,
        0.79582242575422146326454882047613584616,
        0.0,
        0.0,
        -0.79582242575422146326454882047613584616,
        -0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
    ];

    let z = vec![
        0.0,
        0.79582242575422146326454882047613584616,
        0.0,
        -0.79582242575422146326454882047613584616,
        0.0,
        0.0,
        -0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
        -0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
        0.75878691063932814626903427811226742764,
    ];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .zip(z.into_iter())
        .map(|((x, y), z)| Vector3::new(x, y, z))
        .collect();

    (w, p)
}

#[allow(clippy::unreadable_literal)]
#[allow(clippy::excessive_precision)]
#[replace_float_literals(T::from_f64(literal).unwrap())]
pub fn hex_quadrature_strength_11<T>() -> (Vec<T>, Vec<Vector3<T>>)
where
    T: RealField,
{
    let w = vec![
        0.2024770736128001905853371309670196589,
        0.2024770736128001905853371309670196589,
        0.2024770736128001905853371309670196589,
        0.2024770736128001905853371309670196589,
        0.2024770736128001905853371309670196589,
        0.2024770736128001905853371309670196589,
        0.11753834795645628038993180401068212711,
        0.11753834795645628038993180401068212711,
        0.11753834795645628038993180401068212711,
        0.11753834795645628038993180401068212711,
        0.11753834795645628038993180401068212711,
        0.11753834795645628038993180401068212711,
        0.11753834795645628038993180401068212711,
        0.11753834795645628038993180401068212711,
        0.044643912078829241641001154282130043664,
        0.044643912078829241641001154282130043664,
        0.044643912078829241641001154282130043664,
        0.044643912078829241641001154282130043664,
        0.044643912078829241641001154282130043664,
        0.044643912078829241641001154282130043664,
        0.044643912078829241641001154282130043664,
        0.044643912078829241641001154282130043664,
        0.21599204525496912931346666638444131361,
        0.21599204525496912931346666638444131361,
        0.21599204525496912931346666638444131361,
        0.21599204525496912931346666638444131361,
        0.21599204525496912931346666638444131361,
        0.21599204525496912931346666638444131361,
        0.21599204525496912931346666638444131361,
        0.21599204525496912931346666638444131361,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.14519934586011569829250580079425982305,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.061441994097835335202750044633046200824,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
        0.022614296138821884223196230668984478131,
    ];

    let x = vec![
        -0.81261433409962649639237559737974432611,
        0.0,
        0.0,
        0.0,
        0.81261433409962649639237559737974432611,
        0.0,
        0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        -0.73466828699700801734638476986754918792,
        0.73466828699700801734638476986754918792,
        0.0,
        0.73466828699700801734638476986754918792,
        0.73466828699700801734638476986754918792,
        0.0,
        0.0,
        -0.73466828699700801734638476986754918792,
        -0.73466828699700801734638476986754918792,
        0.73466828699700801734638476986754918792,
        0.0,
        -0.73466828699700801734638476986754918792,
        0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        -0.96509966551271026293028182312534456821,
        -0.45079993511450943037788434573026952398,
        0.96509966551271026293028182312534456821,
        0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        -0.96509966551271026293028182312534456821,
        -0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.96509966551271026293028182312534456821,
        0.45079993511450943037788434573026952398,
        0.96509966551271026293028182312534456821,
        0.96509966551271026293028182312534456821,
        -0.96509966551271026293028182312534456821,
        0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        -0.96509966551271026293028182312534456821,
        0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        -0.35390281459663013491031287081289167626,
        -0.94124485721060326391115015763113464139,
        0.35390281459663013491031287081289167626,
        0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        -0.35390281459663013491031287081289167626,
        -0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.35390281459663013491031287081289167626,
        0.94124485721060326391115015763113464139,
        0.35390281459663013491031287081289167626,
        0.35390281459663013491031287081289167626,
        -0.35390281459663013491031287081289167626,
        0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        -0.35390281459663013491031287081289167626,
    ];

    let y = vec![
        0.0,
        0.0,
        0.81261433409962649639237559737974432611,
        0.0,
        0.0,
        -0.81261433409962649639237559737974432611,
        -0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        -0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        -0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        -0.73466828699700801734638476986754918792,
        0.0,
        0.73466828699700801734638476986754918792,
        0.73466828699700801734638476986754918792,
        0.0,
        -0.73466828699700801734638476986754918792,
        -0.73466828699700801734638476986754918792,
        0.0,
        0.73466828699700801734638476986754918792,
        -0.73466828699700801734638476986754918792,
        0.73466828699700801734638476986754918792,
        0.0,
        0.96509966551271026293028182312534456821,
        -0.96509966551271026293028182312534456821,
        0.96509966551271026293028182312534456821,
        -0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        -0.96509966551271026293028182312534456821,
        -0.96509966551271026293028182312534456821,
        -0.96509966551271026293028182312534456821,
        0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        0.96509966551271026293028182312534456821,
        0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.96509966551271026293028182312534456821,
        -0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        0.35390281459663013491031287081289167626,
        -0.35390281459663013491031287081289167626,
        0.35390281459663013491031287081289167626,
        -0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        -0.35390281459663013491031287081289167626,
        -0.35390281459663013491031287081289167626,
        -0.35390281459663013491031287081289167626,
        0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        0.35390281459663013491031287081289167626,
        0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.35390281459663013491031287081289167626,
        -0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
    ];

    let z = vec![
        0.0,
        0.81261433409962649639237559737974432611,
        0.0,
        -0.81261433409962649639237559737974432611,
        0.0,
        0.0,
        -0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        -0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        0.60167526419826270163441300578531749659,
        -0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        -0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        0.85545576101775998467509147069034657598,
        -0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        -0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        0.31339340451605472104577323055795129941,
        0.0,
        -0.73466828699700801734638476986754918792,
        -0.73466828699700801734638476986754918792,
        0.0,
        0.73466828699700801734638476986754918792,
        0.73466828699700801734638476986754918792,
        -0.73466828699700801734638476986754918792,
        0.73466828699700801734638476986754918792,
        0.0,
        0.0,
        0.73466828699700801734638476986754918792,
        -0.73466828699700801734638476986754918792,
        -0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.96509966551271026293028182312534456821,
        -0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        -0.45079993511450943037788434573026952398,
        -0.96509966551271026293028182312534456821,
        -0.45079993511450943037788434573026952398,
        -0.96509966551271026293028182312534456821,
        0.96509966551271026293028182312534456821,
        -0.96509966551271026293028182312534456821,
        0.96509966551271026293028182312534456821,
        -0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.45079993511450943037788434573026952398,
        0.96509966551271026293028182312534456821,
        0.45079993511450943037788434573026952398,
        -0.96509966551271026293028182312534456821,
        -0.45079993511450943037788434573026952398,
        -0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.35390281459663013491031287081289167626,
        -0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        -0.94124485721060326391115015763113464139,
        -0.35390281459663013491031287081289167626,
        -0.94124485721060326391115015763113464139,
        -0.35390281459663013491031287081289167626,
        0.35390281459663013491031287081289167626,
        -0.35390281459663013491031287081289167626,
        0.35390281459663013491031287081289167626,
        -0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.94124485721060326391115015763113464139,
        0.35390281459663013491031287081289167626,
        0.94124485721060326391115015763113464139,
        -0.35390281459663013491031287081289167626,
        -0.94124485721060326391115015763113464139,
    ];

    let p = x
        .into_iter()
        .zip(y.into_iter())
        .zip(z.into_iter())
        .map(|((x, y), z)| Vector3::new(x, y, z))
        .collect();

    (w, p)
}
